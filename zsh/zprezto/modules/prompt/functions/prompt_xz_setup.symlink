# Powerline zsh prompt theme
# heavily inspired by paradox theme

# Load dependencies.
pmodload 'helper'

# Define variables.
_prompt_xz_current_bg='NONE'
_prompt_xz_segment_separator=''

function prompt_xz_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_xz_current_bg" != 'NONE' && "$1" != "$_prompt_xz_current_bg" ]]; then
    print -n " $bg%F{$_prompt_xz_current_bg}$_prompt_xz_segment_separator$fg "
  else
    print -n "$bg$fg "
  fi
  _prompt_xz_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_xz_build_prompt {
  local last_bg
  if [[ "$SSH_CONNECTION" != '' ]]; then
    prompt_xz_start_segment yellow black '%n@%m'
  elif [[ $(logname) != $(whoami) ]]; then
    prompt_xz_start_segment yellow black '%n'
  fi
  prompt_xz_start_segment black white '$_prompt_xz_pwd'
  last_bg='black'

  if [[ $ruby_prompt ]]; then
    prompt_xz_start_segment magenta default '$ruby_prompt'
    last_bg='magenta'
  fi
  if [[ -n "$git_info" ]]; then
    prompt_xz_start_segment red white '%B${(e)git_info[ref]}${(e)git_info[status]}%b'
    last_bg='red'
  fi
  print -n "%K{$last_bg}%F{$last_bg}"
}

function prompt_xz_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_xz_pwd="$MATCH"
    unset MATCH
  else
    _prompt_xz_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
  fi
}

function prompt_xz_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  prompt_xz_pwd

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi
  if type "rvm-prompt" > /dev/null; then
    ruby_prompt=$(rvm-prompt)
  fi
}

function prompt_xz_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_xz_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%K{cyan}%k%F{cyan}%f'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%K{yellow}%k%F{yellow}%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%K{green}%k%F{green}%f'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ' † %s'
  zstyle ':prezto:module:git:info:added' format ' +'
  zstyle ':prezto:module:git:info:ahead' format ' ⬆'
  zstyle ':prezto:module:git:info:behind' format ' ⬇'
  zstyle ':prezto:module:git:info:branch' format ' %b'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' ×'
  zstyle ':prezto:module:git:info:dirty' format ' †'
  zstyle ':prezto:module:git:info:modified' format ' ∗'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ➙'
  zstyle ':prezto:module:git:info:stashed' format ' S'
  zstyle ':prezto:module:git:info:unmerged' format ' ═'
  zstyle ':prezto:module:git:info:untracked' format ' ?'
  zstyle ':prezto:module:git:info:keys' format \
    'ref' '$(coalesce "%b" "%p" "%c")' \
    'status' '%s%D%A%B%S%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='${(e)$(prompt_xz_build_prompt)} ${editor_info[keymap]} '
#  RPROMPT='%F{blue}[%F{green}%D{%H:%M:%S}%F{blue}]%f'
  RPROMPT=''
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_xz_setup "$@"
